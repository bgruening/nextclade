#!/usr/bin/env bash
trap "exit 0" INT
set -euo pipefail

# Validates GFF3 files using genometools
#
# See:
# - https://github.com/The-Sequence-Ontology/Specifications/blob/master/gff3.md
# - https://github.com/genometools/genometools
#
# Dependencies:
#
#   apt-get install genometools

if [[ $# -ne 1 ]]; then
  echo "Usage: $0 <path to directory or annotation.gff>" >&2
  exit 1
fi

input="$1"

IGNORED_MESSAGES=(
  "input is valid GFF3"
)

IGNORED_PATH_PREFIXES=(
  # "error: CDS feature on line 1691 has the wrong phase 0 (should be 1)"
  # We are pretty sure that the phase is correct, but this particular sequence is broken due to frame shift anyways.
  "tmp/smoke-tests/result/nextstrain/sars-cov-2/wuhan-hu-1/proteins/with_dataset/nextclade.gff"
  "tmp/smoke-tests/result/nextstrain/sars-cov-2/wuhan-hu-1/proteins/with_dataset_zip/nextclade.gff"
  "tmp/smoke-tests/result/nextstrain/sars-cov-2/wuhan-hu-1/proteins/with_name/nextclade.gff"
  "tmp/smoke-tests/result/nextstrain/sars-cov-2/wuhan-hu-1/proteins/with_ref_and_annotation/nextclade.gff"
  "tmp/smoke-tests/result/nextstrain/sars-cov-2/wuhan-hu-1/proteins/with_ref_and_annotation_and_tree/nextclade.gff"

  # "error: GFF3 file is empty"
  # Here all sequences do not align, because alignment params are not available
  # (these 2 run modes ignore pathogen.json). This results in empty annotation files.
  "tmp/smoke-tests/result/nextstrain/yellow-fever/prM-E/with_ref_and_annotation/nextclade.gff"
  "tmp/smoke-tests/result/nextstrain/yellow-fever/prM-E/with_ref_and_annotation_and_tree/nextclade.gff"
)

IGNORED_SEQUENCE_REGEXES=(
  # nextstrain/measles/genome/WHO-2012
  "SMOKE_TEST_REVERSE_COMPLEMENTED_SEQUENCE\\|PP620722"
  "SMOKE_TEST_REVERSE_COMPLEMENTED_SEQUENCE\\|KU684406"
)

function log() {
  GREP_COLORS='mt=01;31' grep --line-buffered --color=always -iE "\b(err|error|fail|can not|cannot|can't|unable|critical|fatal|reject|deny|denied|terminat|abort|panic|fault|invalid|undefined symbol|not found|)\b" |
  GREP_COLORS='mt=01;33' grep --line-buffered --color=always -iE "\b(warn|warning|caution|alert|notice|)\b" |
  GREP_COLORS='mt=01;36' grep --line-buffered --color=always -iE "\b(note|info|status|detail|)\b"
}

function should_ignore {
  local path="$1"
  for prefix in "${IGNORED_PATH_PREFIXES[@]}"; do
    if [[ "$path" == "$prefix"* ]]; then
      return 0
    fi
  done
  return 1
}

function filter_gff_content {
  local grep_pattern=""
  for regex in "${IGNORED_SEQUENCE_REGEXES[@]}"; do
    if [[ -z "$grep_pattern" ]]; then
      grep_pattern="^${regex}[[:space:]]"
    else
      grep_pattern="${grep_pattern}|^${regex}[[:space:]]"
    fi
  done

  if [[ -n "$grep_pattern" ]]; then
    grep -vE "$grep_pattern"
  else
    cat
  fi
}

status_accumulator=0

function process_file() {
  local file="$1"
  local output
  local status=0

  if should_ignore "$file"; then
#    echo -e "\033[0;90m⬜ Ignored '$file'\033[0m"
#    echo ""
    return
  fi

  output=$(filter_gff_content < "$file" | gt gff3validator /dev/stdin 2>&1) || status=$?

  if [[ $status -ne 0 ]]; then
    status_accumulator=1
  fi

  output_filtered=$(echo "$output" | sed 's|^gt gff3validator: ||' | grep -vE "$(IFS='|'; echo "${IGNORED_MESSAGES[*]}")" || true)

  if [[ -n "$output_filtered" ]]; then
    if [[ $status -ne 0 ]]; then
      echo -e "\033[0;31m❌ '$file'\033[0m"
    else
      echo -e "\033[0;33m⚠️  '$file'\033[0m"
    fi
    echo "$output_filtered" | log
    echo ""
#  else
#    echo -e "\033[0;32m✅ '$file'\033[0m"
#    echo ""
  fi

}

if [[ -d "$input" ]]; then
  while IFS= read -r -d $'\0' file; do
    if [[ -f "$file" ]] || [[ -L "$file" && -f "$(readlink -f "$file")" ]]; then
      process_file "$file"
    fi
  done < <(find "$input" -type l -o -type f \( -name "*.gff" -o -name "*.gff3" \) -print0)
elif [[ -f "$input" ]] || [[ -L "$input" && -f "$(readlink -f "$input")" ]]; then
  process_file "$input"
else
  echo "Error: $input is not a valid file or directory" >&2
  exit 1
fi

if [[ $status_accumulator -ne 0 ]]; then
  exit 1
fi
